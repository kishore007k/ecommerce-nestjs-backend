generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(cuid())
  name         String?
  email        String     @unique
  password     String
  salt         String?
  avatar       String?
  role         Role?      @default(USER)
  refreshToken String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  orders       Order[]
  wishlists    Wishlist[]
  review       Review[]
}

model Order {
  id            String          @id @default(cuid())
  name          String?
  price         Float?          @default(0)
  quantity      Int?            @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  user          User?           @relation(fields: [userId], references: [id])
  userId        String?
  orderProducts OrderProducts[]
}

model Product {
  id            String          @id @default(cuid())
  name          String?
  price         Float           @default(0)
  description   String?
  quantity      Int             @default(0)
  stars         Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  wislist       Wishlist?       @relation(fields: [wishlistId], references: [id])
  wishlistId    String?
  category      Category?       @relation(fields: [categoryId], references: [id])
  categoryId    String?
  tag           Tag?            @relation(fields: [tagId], references: [id])
  tagId         String?
  image         String[]        @default([])
  orderProducts OrderProducts[]
  reviews       Review[]
}

model OrderProducts {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Wishlist {
  id        String    @id @default(cuid())
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  products  Product[]
}

model Review {
  id          String   @id @default(cuid())
  review      String?
  description String?
  stars       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  product     Product? @relation(fields: [productId], references: [id])
  productId   String?
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model Category {
  id        String    @id @default(cuid())
  category  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  products  Product[]
}

model Tag {
  id        String    @id @default(cuid())
  tag       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  products  Product[]
}

model Image {
  id        String   @id @default(cuid())
  url       String?
  alt       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum Role {
  ADMIN
  USER
}
